apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply from: "../test.gradle"
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
//apply plugin: 'com.ceabie.dexnkife'
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.wei.sample"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            //请勿轻易修改
            abiFilters "armeabi", "armeabi-v7a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    //签名
//    signingConfigs {
//        release {
//            keyAlias properties.getProperty('alphaKeyAlias')
//            keyPassword properties.getProperty('alphaKeyPassword')
//            storeFile file(properties.getProperty('alphaStoreFile'))
//            storePassword properties.getProperty('alphaStorePassword')
//            v1SigningEnabled true
//            v2SigningEnabled true
//        }
//    }

    buildTypes {
        debug {}
        release {
            shrinkResources true   // 移除无用的resource文件
            zipAlignEnabled true        //Zipalign优化
            minifyEnabled true     //混淆
//            signingConfig signingConfigs.release
            pseudoLocalesEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        releaseTest {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
        }
    }


    applicationVariants.all { variant ->
        println("variant.name： " + variant.name)
        println("variant.buildType： " + variant.buildType.name)
    }


    applicationVariants.all { variant ->
        variant.getPackageApplicationProvider().get().outputs.files.each { output ->
            println("路径： " + output)

        }
    }

//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            println("路径： " + output.outputFile)
//        }
//    }

    dexOptions {
        //本地启用此配置，Jenkins使用默认
        if (System.getProperty("JENKINS_APK_FILE_NAME") == 'none') {
            jumboMode = true  //支持最大工程模式
            javaMaxHeapSize "10g"
            //incremental false//使用增量模式

            preDexLibraries = false //预编译
            threadCount = "8" //线程数目
        } else {
            javaMaxHeapSize "4g"
            threadCount = "4"
        }

        keepRuntimeAnnotatedClasses false //将运行时注解不要打包到主dex文件中，否则主dex超过限制，打包失败。

        additionalParameters = [//dex参数详见 dx --help
                                '--multi-dex',//多分包
                                '--set-max-idx-number=48000',//每个包内方法数上限
                                '--main-dex-list=' + projectDir + '/maindexList.txt',//打包进主classes.dex的文件列表
                                '--minimal-main-dex'//使上一句生效
        ]
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['aars']
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'sign.properties'
        exclude 'keystore.jks'
        exclude 'lib/mips64/*.so'
        exclude 'lib/mips/*.so'
    }

    //kotlin Parcelable
    androidExtensions {
        experimental = true
    }
}

//kotlin {
//    experimental {
//        coroutines 'enable'
//    }
//}

repositories {
    flatDir {
        dirs 'aars'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(include: ['*.aar'], dir: 'aars')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.41'


    // ------------- androidx -------------
    implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta2'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-beta01'
    implementation 'androidx.core:core-ktx:1.2.0-alpha02'
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta2"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0-alpha02'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha02'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0-beta02'
    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0-beta02'
    implementation 'androidx.work:work-runtime-ktx:2.1.0'

    // ------------- Room -------------
    def room_version = "2.2.0-alpha01" // 2.1.0 for latest stable version
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation "androidx.room:room-guava:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // CameraX core library.
//    implementation "androidx.camera.core:core:+"
    // If you want to use CameraView.
//    implementation "androidx.camera.core:view:+"
    // If you want to use Camera2 extensions.
//    implementation "androidx.camera.core:camera2:+"

    // ------------- Testing dependencies -------------
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0-rc01'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0-alpha02'
    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.2.0"
    testImplementation 'junit:junit:4.13-beta-3'


    implementation 'com.google.android.material:material:1.1.0-alpha08'


    // ------------- RxAndroid -------------
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'

    // ------------- 组件路由 -------------
    implementation 'com.alibaba:arouter-api:1.4.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.1'

    //-------------- 内存管理 -------------
    implementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-3'
    implementation "com.github.markzhai:blockcanary-android:1.5.0"

    // ------------- 图片加载 -------------
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    kapt 'com.github.bumptech.glide:compiler:4.9.0'

    // ------------- 通信 -------------
    implementation 'org.greenrobot:eventbus:3.1.1'

    // ------------- 网络请求 -------------
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.1'
//    implementation 'com.squareup.okhttp3:okhttp:4.0.1'

    // ------------- hook框架 -------------
    compileOnly 'de.robv.android.xposed:api:82'

    // ------------- 腾讯webview加速 -------------
    implementation 'com.tencent.sonic:sdk:3.1.0'

    //
    implementation "org.jetbrains.anko:anko:0.10.8"

    // ------------- multidex 分包 -------------
    implementation 'com.android.support:multidex:1.0.3'
    androidTestImplementation 'com.android.support:multidex-instrumentation:1.0.3'

//    implementation project(':library')

    // -------------- Litho ------------------
    implementation 'com.facebook.litho:litho-core:0.25.0'
    implementation 'com.facebook.litho:litho-widget:0.25.0'
    kapt 'com.facebook.litho:litho-processor:0.25.0'
    // SoLoader
    implementation 'com.facebook.soloader:soloader:0.6.1'
    // For integration with Fresco
    implementation 'com.facebook.litho:litho-fresco:0.25.0'
    // For testing
    testImplementation 'com.facebook.litho:litho-testing:0.25.0'

    // -------------- Sections ------------------
    implementation 'com.facebook.litho:litho-sections-core:0.25.0'
    implementation 'com.facebook.litho:litho-sections-widget:0.25.0'
    compileOnly 'com.facebook.litho:litho-sections-annotations:0.25.0'
    kapt 'com.facebook.litho:litho-sections-processor:0.25.0'

    //--------------- inject -----------------
    implementation 'com.squareup:javapoet:1.11.1'
    implementation 'org.aspectj:aspectjrt:1.9.4'
    implementation 'org.javassist:javassist:3.25.0-GA'
}
